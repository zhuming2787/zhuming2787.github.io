<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Zhuming&#39;博客</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>成为更好的自己</description>
    <pubDate>Tue, 12 Mar 2024 12:29:24 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>单调栈</title>
      <link>http://example.com/2024/03/12/%E5%8D%95%E8%B0%83%E6%A0%88/</link>
      <guid>http://example.com/2024/03/12/%E5%8D%95%E8%B0%83%E6%A0%88/</guid>
      <pubDate>Tue, 12 Mar 2024 12:25:02 GMT</pubDate>
      
        
        
      <description>&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;单调栈&lt;/strong&gt;是一种常用的数据结构，主要用于解决一些与连续元素相关的问题。以下是单调栈的一些常见应用：&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;寻找下一个更大元素（Next Greater Element）：给定一个数组，对于数组中的每</description>
        
      
      
      
      <content:encoded><![CDATA[<hr><p><strong>单调栈</strong>是一种常用的数据结构，主要用于解决一些与连续元素相关的问题。以下是单调栈的一些常见应用：</p><hr><ul><li><p>寻找下一个更大元素（Next Greater Element）：给定一个数组，对于数组中的每个元素，找到右边第一个比它大的元素。这个问题可以使用单调递减栈来解决。遍历数组，将元素的索引入栈，如果当前元素比栈顶元素大，那么弹出栈顶元素，并将当前元素作为栈顶元素的下一个更大元素。<br>eg.<a href="https://www.luogu.com.cn/problem/P2947">奶牛问题(洛谷 P2947)</a>利用单调栈，将O(n²)优化成了O(n)</p></li><li><p>寻找下一个更小元素（Next Smaller Element）：类似于上述问题，给定一个数组，对于数组中的每个元素，找到右边第一个比它小的元素。这个问题可以使用单调递增栈来解决。</p></li><li><p>寻找最近更大元素（Closest Greater Element）：给定一个数组，对于数组中的每个元素，找到距离它最近且大于它的元素。这个问题可以使用单调递减栈来解决。遍历数组，如果当前元素比栈顶元素大，那么弹出栈顶元素，直到找到距离当前元素最近的更大元素。</p></li><li><p>寻找最近更小元素（Closest Smaller Element）：类似于上述问题，给定一个数组，对于数组中的每个元素，找到距离它最近且小于它的元素。这个问题可以使用单调递增栈来解决。</p></li></ul><hr><p>柱状图中最大矩形面积（Largest Rectangle in Histogram）：给定一个柱状图，找到面积最大的矩形。这个问题可以使用单调递增栈来解决。遍历柱状图，如果当前柱的高度小于栈顶柱的高度，则计算栈顶柱的面积，并更新最大面积。反之，将当前柱入栈。</p><p>接雨水（Trapping Rain Water）：给定一个数组，表示不同高度的墙，求解能够容纳多少雨水。这个问题可以使用单调递减栈来解决。遍历数组，如果当前元素比栈顶元素大，则计算两者之间能够容纳的雨水量，并累加到总雨水量中。</p><p>以上是单调栈的一些常见应用，它可以帮助我们解决许多与连续元素相关的问题，提高算法的效率并简化代码实现。</p>]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/%E6%A0%88/">栈</category>
      
      
      <comments>http://example.com/2024/03/12/%E5%8D%95%E8%B0%83%E6%A0%88/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>C++基础</title>
      <link>http://example.com/2024/03/10/C-%E5%9F%BA%E7%A1%80/</link>
      <guid>http://example.com/2024/03/10/C-%E5%9F%BA%E7%A1%80/</guid>
      <pubDate>Sun, 10 Mar 2024 12:02:12 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;C-基础&quot;&gt;&lt;a href=&quot;#C-基础&quot; class=&quot;headerlink&quot; title=&quot;C++ 基础&quot;&gt;&lt;/a&gt;C++ 基础&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;1-1-1-简述下C-语言的特点&quot;&gt;&lt;a href=&quot;#1-1-1-简述下C-语言的特点&quot; cl</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="C-基础"><a href="#C-基础" class="headerlink" title="C++ 基础"></a>C++ 基础</h2><hr><h3 id="1-1-1-简述下C-语言的特点"><a href="#1-1-1-简述下C-语言的特点" class="headerlink" title="1.1.1 简述下C++语言的特点"></a>1.1.1 简述下C++语言的特点</h3><ol><li>C++在C语言的基础上引入了<strong>面对对象</strong>的机制，同时也兼容C语言<br>(面对对象：把一切事物抽象，然后对每个事物的性质和行为进行分析,而面向过程指将一件事情按照步骤进行)</li><li>C++有三大特性: (1). 封装 (2). 继承 (3). 多态<br>(封装：就是将一个类的信息隐藏在类的内部，不允许外界直接访问，而是提供某些方法实现对隐藏信息的访问和操作。封装的好处就是增强了<strong>数据安全性</strong>，也方便了类的实现和修改)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class student&#123;</span><br><span class="line">public:  //公共权限  类内可以访问 类外可以访问</span><br><span class="line">    string School;</span><br><span class="line">protected: //保护权限 类内可以访问 类外不可以访问</span><br><span class="line">    string PhoneNumber;</span><br><span class="line">private: //私有权限 类内可以访问 类外不可以访问</span><br><span class="line">    int Birthday;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>&emsp;(继承：类与类之间的一种关系。让子类继承父类的特征和行为。好处在于实现了代码的复用)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class BasePage&#123;</span><br><span class="line">public:...</span><br><span class="line">protected:...</span><br><span class="line">private:...</span><br><span class="line">&#125;</span><br><span class="line">class Java : public BasePage&#123;...&#125;</span><br></pre></td></tr></table></figure>&emsp;继承方式：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class A&#123;</span><br><span class="line">public: int a;</span><br><span class="line">protected: int b;</span><br><span class="line">private: int c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class B:public A //第一种方法</span><br><span class="line">&#123;</span><br><span class="line">public: int a;</span><br><span class="line">protected: int b;</span><br><span class="line">不可访问: int c;</span><br><span class="line">&#125;</span><br><span class="line">class B:protected A //第二种方法</span><br><span class="line">&#123;</span><br><span class="line">protected:</span><br><span class="line">int a;int b;</span><br><span class="line">不可访问：int c;</span><br><span class="line">&#125;</span><br><span class="line">class B:private A //第三种方法</span><br><span class="line">&#123;</span><br><span class="line">private:int a int b;</span><br><span class="line">不可访问: int c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h4 id="struct和class唯一区别在于默认的访问权限不同"><a href="#struct和class唯一区别在于默认的访问权限不同" class="headerlink" title="struct和class唯一区别在于默认的访问权限不同"></a>struct和class唯一区别在于默认的访问权限不同</h4><h6 id="struct默认公共；class默认私有"><a href="#struct默认公共；class默认私有" class="headerlink" title="struct默认公共；class默认私有"></a><code>struct</code>默认公共；<code>class</code>默认私有</h6><hr><p>(多态：指的是一个类对象的相同方法在不同情形下有不同的表现形式。使得不同内部结构的对象可以共享相同的外部接口)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>C++语言编写出的程序结构清晰、易于扩充，程序可读性好。</li><li>C++生成的代码质量高，运行效率高、仅比汇编语言慢10%~20%</li><li>C++更加安全，增加了const常量，引用，四类cast转化、智能指针等</li><li>C++可复用性高、引入了模板的概念、比如标准模板库STL</li><li>最后，C++是不断在发展的语言。C++后续版本更是更新发展了不少新特性比如nullptr、auto变量等</li></ol><hr>]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/%E5%9F%BA%E7%A1%80/">基础</category>
      
      
      <comments>http://example.com/2024/03/10/C-%E5%9F%BA%E7%A1%80/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>链表</title>
      <link>http://example.com/2024/03/09/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</link>
      <guid>http://example.com/2024/03/09/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</guid>
      <pubDate>Sat, 09 Mar 2024 12:27:08 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;什么是链表？&quot;&gt;&lt;a href=&quot;#什么是链表？&quot; class=&quot;headerlink&quot; title=&quot;什么是链表？&quot;&gt;&lt;/a&gt;什么是链表？&lt;/h2&gt;&lt;p&gt;&amp;emsp;如图&lt;br&gt;&lt;img src=&quot;https://pic</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li></li></ul><h2 id="什么是链表？"><a href="#什么是链表？" class="headerlink" title="什么是链表？"></a>什么是链表？</h2><p>&emsp;如图<br><img src="https://pic4.zhimg.com/v2-3a42e577405f60a79294ce207dcba53e_r.jpg"><br><strong>链表</strong>的特点:用一组位于任意位置的存储单元存储线性表的数据元素</p><p><strong>代码实现链表的方法</strong>:<br>动态链表：工程上为了节省空间经常使用<br>静态链表：算法竞赛里面经常使用,而且会直接使用STL list</p><hr>]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">基础数据结构</category>
      
      
      <comments>http://example.com/2024/03/09/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
